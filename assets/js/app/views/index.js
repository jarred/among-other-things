// Generated by CoffeeScript 1.6.2
(function() {
  define(["logoView", 'introView'], function(LogoView, IntroView) {
    var IndexView;

    return IndexView = Backbone.View.extend({
      projectsShown: 0,
      initialize: function(options) {
        var sizeCount,
          _this = this;

        this.options = options;
        _.bindAll(this);
        this.model = this.getData();
        console.log(this.model.toJSON());
        sizeCount = {};
        _.each(this.model.get('projects'), function(project) {
          return _.each(project.images, function(image) {
            if (sizeCount[image.size] != null) {
              return sizeCount[image.size].count++;
            } else {
              return sizeCount[image.size] = {
                count: 0
              };
            }
          });
        });
        this.intro = new IntroView({
          el: this.$('.intro')
        });
        this.showProject(0);
      },
      getData: function() {
        var model,
          _this = this;

        model = new Backbone.Model({
          projects: []
        });
        _.each(this.$('.project'), function(el) {
          var $el, projectData;

          $el = $(el);
          projectData = JSON.parse($el.find('.data').html());
          return model.get('projects').push(projectData);
        });
        return model;
      },
      randomiseLayout: function() {
        var screenH, screenW,
          _this = this;

        screenW = $(window).width();
        screenH = $(window).height();
        return _.each($('.box'), function(el) {
          var $el, x, y;

          $el = $(el);
          x = Math.round(Math.random() * (screenW - $el.width()));
          y = Math.round(Math.random() * (screenH - $el.height()));
          return $el.css({
            left: "" + x + "px",
            top: "" + y + "px"
          });
        });
      },
      showProject: function(num) {
        var _this = this;

        this.currentProject = num;
        this.project = this.model.get('projects')[num];
        console.log(this.project);
        this.project.images = _.shuffle(this.project.images);
        this.$('.image-box').addClass('empty');
        this.imageCount = 0;
        this.imagesLoaded = 0;
        TweenMax.to(this.$('.info'), .3, {
          opacity: 0,
          ease: Quint.easeIn,
          onComplete: this.animateProjectInfoIn
        });
        _.each(this.project.images, function(image) {
          var $box, $container, img;

          $box = $("." + image.size);
          if (!$box.hasClass('empty')) {
            return;
          }
          _this.imageCount++;
          img = new Image();
          img.src = image.src;
          img.onload = _this.imageLoaded;
          $container = $("<div class=\"image slide\"></div>");
          $container.append(img);
          $box.find('.internal').append($container);
          return $box.removeClass('empty');
        });
        return _.each(this.$('.box.empty'), function(el) {
          var $el;

          $el = $(el);
          return $el.find('.internal').append("<div class=\"blank slide\"></div>");
        });
      },
      imageLoaded: function() {
        this.imagesLoaded++;
        if (this.imagesLoaded >= this.imageCount) {
          return this.animateProjectIn();
        }
      },
      animateProjectInfoIn: function() {
        var content, title, url;

        url = this.$(".project[data-index=" + this.currentProject + "]").data('url');
        title = this.$(".project[data-index=" + this.currentProject + "] .title").text();
        content = this.$(".project[data-index=" + this.currentProject + "] .excerpt").html();
        if (url === "none") {
          this.$('.info h2').text(title);
        } else {
          this.$('.info h2').html("<a href=\"" + url + "\">" + title + "</a>");
        }
        this.$('.info .content').html(content);
        return TweenMax.to(this.$('.info'), .3, {
          delay: .3,
          ease: Quint.easeOut,
          opacity: 1
        });
      },
      animateProjectIn: function() {
        var _this = this;

        this.intro.trigger('animate-in', this.project);
        return _.each($('.image-box'), function(el, index) {
          var $el, h, tween;

          $el = $(el);
          h = $el.height();
          tween = {
            top: 0 - h,
            ease: Quint.easeOut,
            delay: index * .1
          };
          if (index + 1 >= $('.image-box').length) {
            tween.onComplete = _this.projectAnimatedIn;
          }
          return TweenMax.to($el.find('.internal'), .3, tween);
        });
      },
      projectAnimatedIn: function() {
        var _this = this;

        _.each(this.$('.box'), function(el) {
          var $el;

          $el = $(el);
          $el.find('.slide:first').remove();
          return $el.find('.internal').css({
            top: '0px'
          });
        });
        return _.delay(this.nextProject, 7000);
      },
      nextProject: function() {
        if (this.currentProject < this.model.get('projects').length - 1) {
          return this.showProject(this.currentProject + 1);
        } else {
          return this.showProject(0);
        }
      }
    });
  });

}).call(this);
