// Generated by CoffeeScript 1.6.2
(function() {
  define(["backbone", "underscore", "app/views/logo"], function() {
    var IndexView;

    return IndexView = Backbone.View.extend({
      sizes: ["size22", "size32", "size32", "size23", "size34", "size34", "size43", "logo"],
      projectsShown: 0,
      initialize: function(options) {
        this.options = options;
        _.bindAll(this);
        this.$el = $(this.el);
        this.sizes = _.shuffle(this.sizes);
        _.each(this.sizes, this.addCell);
        this.model = this.getData();
        $("#grid").nested({
          animate: false,
          minWidth: 130,
          gutter: 20,
          selector: '.box',
          resizeToFitOptions: {
            resizeAny: false
          }
        });
      },
      cellTemplate: _.template("<div class=\"box image-box <%= size %>\">\n	<div class=\"internal\">\n		<div class=\"preloader animating\">\n			<div class=\"lines\"></div>\n		</div>\n	</div>\n</div>"),
      addCell: function(size) {
        var data;

        if (size === 'bio') {
          this.addBio();
          return;
        }
        if (size === 'logo') {
          this.addLogo();
          return;
        }
        data = {
          size: size
        };
        $('#grid').append(this.cellTemplate(data));
      },
      addBio: function() {
        var name, view;

        name = require("views/intro");
        view = new name({
          appModel: this.model
        });
        $('#grid').append(view.el);
      },
      addLogo: function() {
        var name, view;

        name = require("app/views/logo");
        view = new name({
          appModel: this.model
        });
        $('#grid').append(view.el);
      },
      getData: function() {
        var model,
          _this = this;

        model = new Backbone.Model({
          projects: []
        });
        _.each(this.$('.project'), function(el) {
          var $el, projectData;

          $el = $(el);
          projectData = JSON.parse($el.find('.data').html());
          model.get('projects').push(projectData);
        });
        return model;
      },
      preloadProject: function(n) {
        var project,
          _this = this;

        project = this.model.get('projects')[n];
        this.imagesAdded = this.imagesLoaded = 0;
        _.each(project.images, function(img) {
          var $el, $image, i;

          $el = _this.$("." + img.size + ":not(.has-image)");
          i = new Image();
          i.onload = _this.imageLoaded;
          i.src = img.src;
          $image = $("<div class=\"image\"></div>");
          $image.append(i);
          $el.find('.internal').append($image);
          $el.addClass('has-image');
          _this.imagesAdded++;
        });
      },
      imageLoaded: function() {
        this.imagesLoaded++;
        if (this.imagesLoaded >= this.imagesAdded) {
          if (this.projectsShown === 0) {
            this.transitionProjectIn();
          } else {
            _.delay(this.transitionProjectIn, 3000);
          }
          this.projectsShown++;
        }
      },
      transitionProjectIn: function() {
        var _this = this;

        _.each(this.$('.image-box'), function(el, index) {
          var $el, internal, newY;

          $el = $(el);
          if ($el.hasClass('logo' || $el.hasClass('intro'))) {
            return;
          }
          internal = $el.find('.internal');
          newY = Number(internal.css('top').replace("px", "")) - $el.height();
          console.log(newY);
          TweenMax.to(internal, .3, {
            top: newY,
            delay: .1 * index
          });
        });
        console.log('transitionProjectIn');
      }
    });
  });

}).call(this);
