// Generated by CoffeeScript 1.6.2
(function() {
  define(["libs/backbone", "libs/underscore"], function() {
    var ProjectView;

    return ProjectView = Backbone.View.extend({
      currentImage: -1,
      initialize: function(options) {
        var features;

        this.options = options;
        _.bindAll(this);
        this.$el = $(this.el);
        this.index = Number(this.$el.attr('data-index'));
        this.model = new Backbone.Model(JSON.parse(this.$('.data').html()));
        features = _.reject(this.model.get('images'), function(img) {
          return !img.feature;
        });
        this.model.set('features', _.shuffle(features));
        this.render();
      },
      render: function() {
        var _this = this;

        _.each(this.model.get('features'), function(obj, index) {
          var $img, img;

          img = new Image();
          if (index === 0) {
            img.onload = _this.firstImageLoaded;
          }
          img.src = obj.src;
          $img = $(img);
          $img.css({
            width: "" + obj.width + "px",
            height: "" + obj.height + "px"
          });
          _this.$('.images .internal').append($img);
        });
      },
      firstImageLoaded: function() {
        this.options.appModel.bind('tick', this.next);
      },
      lastImageLoaded: function() {
        var $el, $img, img;

        $el = $(this.$('.images img')[this.model.get('features').length - 1]);
        img = new Image();
        img.src = $el.attr('src');
        $img = $(img);
        $img.css({
          width: $el.css('width'),
          height: $el.css('height')
        });
        this.$('.preloader').replaceWith($img);
      },
      showImage: function(num) {
        var y;

        this.currentImage = num;
        y = 0 - (this.model.get('height') * (num + 1));
        TweenMax.to(this.$('.images .internal'), 0.4, {
          top: y,
          delay: this.index * 0.2,
          ease: Expo.easeOut
        });
      },
      next: function() {
        if (this.currentImage + 1 < this.model.get('features').length) {
          this.showImage(this.currentImage + 1);
        } else {
          this.showImage(0);
        }
      }
    });
  });

}).call(this);
